buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
            url 'http://jcenter.bintray.com'
            mavenCentral()
        }
    }
    dependencies {
        classpath group: 'com.netflix.nebula', name: 'nebula-dependency-recommender', version: '3.6.3'
        classpath group: 'com.blackducksoftware.integration', name: 'hub-gradle-plugin', version: '4.0.0'
    }
}

apply plugin: 'com.blackducksoftware.hub'

buildBom{
	deployHubBdio false
}

allprojects{
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'jacoco'
    apply plugin: 'nebula.dependency-recommender'
    
    dependencyRecommendations {
        dependencyLock file: file("${rootDir}/dependencies.lock")
    }
    
    //Default all projects to a synchronized IDE version number. Certain projects, such as the API project, will override this value
    version = "${lockdownVersion}"
    group = 'com.rsomeara'
    
    sourceCompatibility = "${javaVersion}"

    //Always download sources, to allow debugging, and use Eclipse containers for greater portability
    eclipse {
        classpath {
            downloadSources=true
            containers = [ 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8' ]
        }
    }
    
    repositories {
        mavenCentral()
    }
    
    //Task which will show what the dependency set of the project is in a tree form
    task dependencyReport(type: DependencyReportTask) {}
    
    //Task which will show what is introducing a particular dependency
    task dependencyInsightReport(type: DependencyInsightReportTask) {}

}

subprojects{
    apply plugin: 'maven'

    //All projects should provide source code and javadoc, and upload these with any released artifacts
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }
    
    artifacts {
        archives sourcesJar
        archives javadocJar
    }
    
    //Setup default test behavior, including failure logging
    test {
        testLogging {
            exceptionFormat 'full'

            quiet {
                events 'failed'
            }
            
            info {
                events 'skipped', 'failed', 'passed'
            }
            
            debug {
                events 'started', 'standard_out', 'standard_error', 'skipped', 'failed', 'passed'
            }
        }
        
        useTestNG() {
            useDefaultListeners = true
        }
    }
}

//Create an aggregated jacoco report
task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination "${buildDir}/reports/jacoco/report.xml"
        html.enabled false
        csv.enabled false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}
    
task wrapper(type: Wrapper) {
    gradleVersion = "${gradleVersion}"
}
