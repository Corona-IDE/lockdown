buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
            jcenter()
            mavenCentral()
        }
    }
    dependencies {
        classpath group: 'com.netflix.nebula', name: 'nebula-dependency-recommender', version: '4.2.0'
        classpath group: 'com.netflix.nebula', name: 'nebula-publishing-plugin', version: '4.2.0'
        classpath group: 'com.blackducksoftware.integration', name: 'hub-gradle-plugin', version: '4.0.0'
        classpath group: 'com.jfrog.bintray.gradle', name: 'gradle-bintray-plugin', version: '1.7.3'
    }
}

plugins {
    id 'org.sonarqube' version '2.3'
}

apply plugin: 'com.blackducksoftware.hub'

if (project.hasProperty('sonarLogin')) {
    System.setProperty('sonar.login', "${sonarLogin}")
}

sonarqube {
    properties {
        property 'sonar.projectName', 'Lockdown'
        property 'sonar.projectKey', 'com.coronaide:lockdown'
        property 'sonar.organization', 'corona-ide'
        property 'sonar.junit.reportsPath', file("${buildDir}/test-results/test")
        property 'sonar.core.codeCoveragePlugin', 'jacoco'
        property 'sonar.jacoco.reportPaths', "${buildDir}/jacoco/test.exec"
        property 'sonar.host.url', 'https://sonarqube.com'
    }
}

buildBom{
	deployHubBdio false
}

allprojects{
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'jacoco'
    apply plugin: 'nebula.dependency-recommender'
    apply plugin: 'nebula.maven-resolved-dependencies'

    dependencyRecommendations {
        dependencyLock file: file("${rootDir}/dependencies.lock")
    }
    
    //Default all projects to a synchronized IDE version number. Certain projects, such as the API project, will override this value
    version = "${lockdownVersion}"
    group = 'com.coronaide.lockdown'
    
    sourceCompatibility = "${javaVersion}"

    //Always download sources, to allow debugging, and use Eclipse containers for greater portability
    eclipse {
        classpath {
            downloadSources=true
            containers = [ 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8' ]
        }
    }
    
    repositories {
        mavenCentral()
    }
    
    //Task which will show what the dependency set of the project is in a tree form
    task dependencyReport(type: DependencyReportTask) {}
    
    //Task which will show what is introducing a particular dependency
    task dependencyInsightReport(type: DependencyInsightReportTask) {}

}

subprojects{
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'nebula.maven-base-publish'
    apply plugin: 'nebula.maven-dependencies'
    
    //Add LICENSE so it is included in all JARs, fulfilling the "distributions include license" requirement
    jar{
        from("${rootDir}"){
            include 'LICENSE'
        }
    }
    
    //All projects should provide source code and javadoc, and upload these with any released artifacts
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
        
        from("${rootDir}"){
            include 'LICENSE'
        }
    }
    
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
        
        from("${rootDir}"){
            include 'LICENSE'
        }
    }
    
    artifacts {
        archives sourcesJar
        archives javadocJar
    }
    
    //Setup default test behavior, including failure logging
    test {
        testLogging {
            exceptionFormat 'full'

            quiet {
                events 'failed'
            }
            
            info {
                events 'skipped', 'failed', 'passed'
            }
            
            debug {
                events 'started', 'standard_out', 'standard_error', 'skipped', 'failed', 'passed'
            }
        }
        
        useTestNG() {
            useDefaultListeners = true
            
            //For CI builds on low-power machines, we need to ability to skip computation-intensive tests
            if(project.hasProperty('skipKeyGenerationTests')){
                logger.warn('Skipping long-running key generation tests');
                excludeGroups 'KEY_GENERATION_TEST'
            }
        }
    }
    
    artifacts {
        archives sourcesJar
        archives javadocJar
    }
    
    sonarqube {
        properties {
            property 'sonar.projectKey', "com.coronaide:lockdown:${project.name}"
            property 'sonar.junit.reportsPath', file("${buildDir}/test-results/test")
            property 'sonar.core.codeCoveragePlugin', 'jacoco'
            property 'sonar.jacoco.reportPaths', "${buildDir}/jacoco/test.exec"
            properties['sonar.sources'] = sourceSets.main.java.srcDirs.findAll { it.exists() && !it.path.contains('resources') } ?: []
        }
    }
    
    publishing {
        publications {
            nebula(MavenPublication) {
                artifact sourcesJar {
                    classifier 'sources'
                }
                artifact javadocJar {
                    classifier 'javadoc'
                }
                pom.withXml {
                    configurations.compile.resolvedConfiguration.firstLevelModuleDependencies.each { dep ->
                        asNode().dependencies[0].dependency.find {
                            it.artifactId[0].text() == dep.moduleName &&
                            it.groupId[0].text() == dep.moduleGroup
                        }?.scope[0]?.value = 'compile'
                    }
                }
            }
        }
    }
    
    bintray {
        user = System.getProperty('bintray_user')
        key = System.getProperty('bintray_key')
        publications = [ 'nebula' ]
        pkg {
            repo = 'lockdown'
            name = "${project.name}"
            userOrg = 'corona-ide'
            licenses = ['MIT']
            vcsUrl = 'https://github.com/Corona-IDE/lockdown'
            
            version {
                name = "${lockdownVersion}"
                desc = "${project.name} release ${lockdownVersion} final"
                released  = new Date()
                vcsTag = "${lockdownVersion}"
                
                gpg {
                    sign = true
                }
            }
        }
    }
}

//Create an aggregated jacoco report
task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination "${buildDir}/reports/jacoco/report.xml"
        html.enabled false
        csv.enabled false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}
    
task wrapper(type: Wrapper) {
    gradleVersion = "${gradleVersion}"
}
